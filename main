#!/usr/bin/perl
# Evan Miller 8/16/16
# Conglomerate perl DB IO functions in to an application

# includes
use DBI;
use strict;
use warnings;
use diagnostics;
use Glib 'TRUE', 'FALSE';
use feature 'say';
use Switch;

## global vars
# database handler
my $dbh = DBI->connect('DBI:mysql:db_dev0:localhost','dbdev','dbdev');
my $numInput = 9;
my $strInput = "";
my $introd = 0;
my $greeting = "Welcome to Socman!";
my $mainFuncmenu = "1. Travel 
2. Transfer 
3. Exhibition 
4. Roster 
5. Add Team
6. Add Player
7. Add Locale
8. Table Create
81. Table Line Create
9. Table DROP
10. Table Print
0. Exit";
my $loc = 1;
my $team = 1;



mainFunc();

sub mainFunc {
    while ($numInput != 0) {
        if ($introd == 0) {
            say $greeting;
            $introd++;
        }
        say "$mainFuncmenu"; 
        $numInput = <STDIN>;
        chomp $numInput;
        say "You chose $numInput";
        switch ($numInput) {
            case "1"    { doTravel() }
            case "2"    { doTransfer() }
            case "3"    { doExhib() }
            case "4"    { printRoster() }
            case "5"    { addTeam() }
            case "6"    { addPlayer() }
            case "7"    { addLocale() }
            case "8"    { tableCreate() }
            case "81"   { tableLineCreate() }
            case "9"   { tableDrop() }
            case "10"   { tablePrint() }
            case "0"    { say "Goodybe!" }
            else        { say "Try again." }
        }
    }
    
}
sub doTravel {
    say "Current location: $loc"
    if (!$_[0]{
        say "Travel to what location?";
        my $travelTo = <STDIN>;
        chomp $travelTo;
    } else {
        my $travelTo = $_[0];
        chomp $travelTo;
        $loc = $travelTo;
        say "Current location: $loc":
    }
}

sub doTransfer {
    # call function with doTransfer(player#,team#) or it will ask for missing info
    my $player = 0;
    my $team = 0;
    if(!$_[0]){
        say "Which player?";
        $player = <STDIN>;
    } else {
        $player = $_[0];
    }
    if(!$_[1]){
        say "To which team?"; 
        $team = <STDIN>;
    } else {
        $player = $_[1];
    }
    chomp $player;
    chomp $team;
    say "Player: $player";
    my $oldTeam = getTeam($player);
    my $oldTrans = getTransFromPlayer($player);
    say "Old Team: $oldTeam";
    say "New Team: $team";
    say "Old Trans ID: $oldTrans";
    deleteTrans($oldTrans);
    my $sql = qq/INSERT INTO Rosters (playerID, teamID) values ($player, $team)/;
    my $sth = $dbh->prepare($sql);
    $sth->execute;
    my $newTeam = getTeam($player);
    say "After exec, player is on: $newTeam";
}

sub deleteTrans {
    my $trans = 0;
    if (!$_[0]){
        say "ERROR NO TRANS PROVIDED";
    } else {
        $trans = $_[0];
        chomp $trans;
        my $sql = qq/DELETE FROM Rosters WHERE transID = $trans/;
        my $sth = $dbh->prepare($sql);
        $sth->execute;
    }
}

sub getTransFromPlayer {
    my $player = 0;
    my $trans = 0;
    if (!$_[0]){
        say "ERROR NO PLAYER FOR FUNC getTransFromPlayer";
    } else {
        $player = $_[0];
        chomp $player;
        my $sql = qq/SELECT transID FROM Rosters where playerID = $player/;
        my $sth = $dbh->prepare($sql);
        $sth->execute;
        $sth->bind_col(1, \$trans);
        while ($sth->fetch) {
            return $trans;
        }
    }
}
     
sub doExhib {
}
sub printRoster {
    say "Which team?";
    $numInput = <STDIN>;
    chomp $numInput;
    my $sql = qq/SELECT * FROM Rosters where teamID = $numInput/;
}

sub getTeam {
    my $player = 0;
    my $team = 0;
    if (!$_[0]){
        say "ERROR NO PLAYER FOR FUNC getTeam";
    } else {
        $player = $_[0];
        chomp $player;
        my $sql = qq/SELECT teamID FROM Rosters where playerID = $player/;
        my $sth = $dbh->prepare($sql);
        $sth->execute;
        $sth->bind_col(1, \$team);
        while ($sth->fetch) {
            return $team;
        }
    }
}
     
sub doExhib {
}
sub printRoster {
    say "Which team?";
    $numInput = <STDIN>;
    chomp $numInput;
    my $sql = qq/SELECT * FROM Rosters where teamID = $numInput/;
    my $sth = $dbh->prepare($sql);
    $sth->execute;
    my ($col1, $col2, $col3);
    $sth->bind_col(1, \$col1);
    $sth->bind_col(2, \$col2);
    $sth->bind_col(3, \$col3);
    my $rows = $sth->rows;
    my $count = 0;
    if ($count < $rows){
        say "Players: $rows";
        while ($sth->fetch) {
            say "TransID: $col1, PlayerID: $col2, TeamID: $col3";
        }
    } else {
        say "No players found.";
    }
}
sub addTeam {
}
sub addLocale {
}



sub tableCreate {
    sub tableCreateLocales {
        my $sql = qq/CREATE TABLE `Locales` (
        `varID`         int(11)         NOT NULL UNIQUE     auto_increment,
        `varName`       varchar(50)     NOT NULL UNIQUE     default '',
        `varDefMod`     int(2)          NOT NULL            default 0,
        `varOffMod`     int(2)          NOT NULL            default 0,
        `varMidMod`     int(2)          NOT NULL            default 0,
        `varGKMod`      int(2)          NOT NULL            default 0,
        PRIMARY KEY (`varID`)
        );/;
        my $sth = $dbh->prepare($sql);
        $sth->execute;
    }
    sub tableCreatePlayers {
        my $sql = qq/CREATE TABLE `Players` (
        `varID`         int(11)         NOT NULL UNIQUE     auto_increment,
        `varName`       varchar(25)     NOT NULL            default '',
        `varHome`       int(11)         NOT NULL            default 0,
        `varDef`        int(3)          NOT NULL            default 0,
        `varOff`        int(3)          NOT NULL            default 0,
        `varMid`        int(3)          NOT NULL            default 0,
        `varGK`         int(3)          NOT NULL            default 0,
        PRIMARY KEY (`varID`)
        );/;
        my $sth = $dbh->prepare($sql);
        $sth->execute;
    }
    sub tableCreateTeams {
        my $sql = qq/CREATE TABLE `Teams` (
        `varID`         int(11)         NOT NULL UNIQUE     auto_increment,
        `varName`       varchar(25)     NOT NULL UNIQUE     default '',
        `varHome`       int(11)         NOT NULL            default 0,
        PRIMARY KEY (`varID`)
        );/;
        my $sth = $dbh->prepare($sql);
        $sth->execute;
    }
    sub tableCreateRosters {
        my $sql = qq/CREATE TABLE `Rosters` (
        `transID`       int(11)         NOT NULL UNIQUE     auto_increment,
        `playerID`      int(11)         NOT NULL UNIQUE     default 0,
        `teamID`        int(11)         NOT NULL            default 0,   
        `rosterSpot`    int(11)         NOT NULL            default 0,
        PRIMARY KEY (`transID`)
        );/;
        my $sth = $dbh->prepare($sql);
        $sth->execute;
    }
    tableCreateLocales();
    tableCreatePlayers();
    tableCreateTeams();
    tableCreateRosters();
    return TRUE;
}

sub tableLineCreate {
    sub lineCreateLocales {
        my $sql = qq/INSERT INTO Locales (varName, varDefMod, varOffMod, varMidMod, varGKMod)
            values ("Columbus", 4, 3, 2, 2);/;
        my $sth = $dbh->prepare($sql);
        $sth->execute();
    }
    sub lineCreatePlayers {
        my $sql = qq/INSERT INTO Players (varName, varHome, varDef, varOff, varMid, varGK)
            values ("Messi", 1, 9, 8, 7, 6);/;
        my $sth = $dbh->prepare($sql);
        $sth->execute();
    }
    sub lineCreateTeams {
        my $sql = qq/INSERT INTO Teams (varName, varHome)
            values ("Kickers", 1);/;
        my $sth = $dbh->prepare($sql);
        $sth->execute();
    }
    sub lineCreateRosters {
        my $sql = qq/INSERT INTO Rosters (playerID, teamID, rosterSpot)
            values (1, 1, 1);/;
        my $sth = $dbh->prepare($sql);
        $sth->execute();
    }
    lineCreateLocales();
    lineCreatePlayers();
    lineCreateTeams();
    lineCreateRosters();
    return TRUE;
}
    
sub tableDrop {
    say "Which tables? ALL for all.";
    my $strInput = <STDIN>;
    my $sql = "";
    chomp $strInput;
    if ($strInput eq "ALL"){
        say "Dropping ALL tables";
        $sql = qq/DROP TABLE Locales, Players, Teams, Rosters;/;
    } else {
        say "Dropping table $strInput";
        $sql = qq/DROP TABLE $strInput;/;
    }
    my $sth = $dbh->prepare($sql);
    $sth->execute();
    say "Tables DROPPED";
}    

sub tablePrint {
    my $strInput = "";
    if (!$_[0]) {
        say "Print which table?";
        $strInput = <STDIN>; 
    } else {
        $strInput = $_[0];
    }
    chomp $strInput;
    my $sql = qq/SELECT * FROM $strInput/;
    my $sth = $dbh->prepare($sql);
    $sth->execute();
    my ($col1, $col2, $col3, $col4, $col5, $col6);
    $sth->bind_col(1, \$col1);
    $sth->bind_col(2, \$col2);
    $sth->bind_col(3, \$col3);
    $sth->bind_col(4, \$col4);
    $sth->bind_col(5, \$col5);
    $sth->bind_col(6, \$col6);
    while ($sth->fetch) {
    say "ID: $col1, Name: $col2, Def: $col3, Off: $col4, Mid: $col5, GK: $col6";
    }
    if (!$col1){
    say "Nothing in table.";
    }   
    return TRUE;
}

